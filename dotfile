#!/usr/bin/env python3

import collections
import getpass
import glob
import json
import logging
import os
import platform
import re

def main():
	system = System()

	# TODO: Allow overriding of path.
	top_module = Module(os.path.expanduser('~/.dotfiles'), system)
	top_module.process()

class Module(object):
	def __init__(self, path, system):
		logging.debug('Initiating new module at path: %s', path)

		self.path = path
		self.system = system
		self.config = {}

		self._load_config()
		self._set_name()

	def process(self):
		logging.info('Processing %s', self.path)

		self._process_dependencies()

	def _load_config(self):
		logging.debug('Loading config')

		try:
			file = open(os.path.join(self.path, 'dotfile.json'))
		except FileNotFoundError:
			logging.debug('None found')
			return

		config = json.load(file, object_pairs_hook=collections.OrderedDict)
		file.close()

		self.config = config

	def _set_name(self):
		# If no name is set in config for the module, calculate one
		if not self.config.get('name'):
			basename = os.path.basename(self.path)
			if basename.endswith('.module'):
				basename = basename[:-7]
			self.config['name'] = basename

	def _process_dependencies(self):
		# Process dependencies before this module
		logging.debug('Processing dependencies for %s...', self.config['name'])
		for dep in self._get_dependencies():
			path = os.path.join(self.path, dep) + '.module'
			if not os.path.exists(path):
				logging.warning('Module "%s" not found, ignoring (looked for %s).', dep, path)
				continue

			Module(path, self.system).process()

	def _get_dependencies(self):
		logging.debug('Calculating dependencies for %s', self.config['name'])
		whitelist = self.config.get('whitelist', False)

		dep_list = [] if whitelist else self._get_modules_in_path()

		for pattern, modules in self.config.get('rules', {}).items():
			if not self._system_matches(pattern):
				continue

			for module, enable in modules.items():
				if enable and module not in dep_list:
					dep_list.append(module)
				elif not enable and module in dep_list:
					dep_list.remove(module)

		return dep_list

	def _get_modules_in_path(self):
		return [os.path.basename(mod)[:-7] for mod in glob.iglob(os.path.join(self.path, '*.module'))]

	def _system_matches(self, pattern):
		return re.search(pattern, self.system.id_string)

class System(object):
	def __init__(self):
		self.id_string = getpass.getuser() + '@' + platform.node() + ' ' + platform.system() + '-' + platform.release() + '-' + platform.machine()

if __name__ == '__main__':
	main()
